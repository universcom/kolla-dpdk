#!/bin/bash

# Main function to initialize OVS
function init_OVS {
    init_ovs_db
    init_ovs_bridges
    init_ovs_bonding
    init_ovs_interfaces
    restart_service
    config_path_ports
}

# Function to initialize OVS database
function init_ovs_db {
    ovs-vsctl --no-wait set Open_vSwitch . other_config:pmd-cpu-mask="$(get_value ovs_dpdk_configs pmd_coremask)"
    ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-lcore-mask="$(get_value ovs_dpdk_configs ovs_coremask)"
    ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-mem-channels="$(get_value ovs_dpdk_configs mem_channels)"
    ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem="$(get_value ovs_dpdk_configs socket_mem)"
    ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-hugepage-dir="$(get_value ovs_dpdk_configs hugepage_mountpoint)"
    ovs-vsctl --no-wait set open_vswitch . other_config:dpdk-whitelist-pci-ids="$(get_value ovs_dpdk_configs pci_whitelist)"
    ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-alloc-mem="$(get_value ovs_dpdk_configs alloc_mem)"
    ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=True
}

# Function to initialize OVS bridges
function init_ovs_bridges {
    declare -a bridges
    raw_bridge_mappings=$(get_value ovs bridge_mappings)
    bridge_mappings=( ${raw_bridge_mappings//,/ } )

    for br in "${!bridge_mappings[@]}"; do
        bridges+=( "$(echo ${bridge_mappings[$br]} | cut -f 2 -d ":")" )
    done

    bridges+=( $(get_value ovs_dpdk_configs dpdk_bridge_name) )

    for br in "${!bridges[@]}"; do
        sudo ovs-vsctl --no-wait -- --may-exist add-br ${bridges[$br]} -- set Bridge ${bridges[$br]} datapath_type=netdev
    done
}

# Function to initialize OVS bonding
function init_ovs_bonding {
    dpdk_bridge_name=$(get_value ovs_dpdk_configs dpdk_bridge_name)
    raw_bond_ports=$(get_value ovs_dpdk_bondig_configs interfaces)
    bond_ports=( ${raw_bond_ports//,/ } )
    ovs-vsctl add-bond "$dpdk_bridge_name" bond-dpdk "${bond_ports[@]}" 2>/dev/null

    for nic in "${bond_ports[@]}"; do
        ovs-vsctl --no-wait -- --may-exist add-port "$dpdk_bridge_name" "$nic"
        ovs-vsctl --no-wait --  set interface "$nic" type=dpdk
        ovs-vsctl --no-wait --  set interface "$nic" options:dpdk-devargs=$(get_value "$nic" address)
        ovs-vsctl --no-wait --  set interface "$nic" options:n_rxq=$(get_value ovs_dpdk_configs n_rxq)
        ovs-vsctl --no-wait --  set Interface "$nic" mtu_request="{{ dpdk_interface_mtu }}"
    done

    ovs-vsctl set port bond-dpdk bond_mode=$(get_value ovs_dpdk_bondig_configs bond_mode)
    ovs-vsctl set port bond-dpdk lacp=$(get_value ovs_dpdk_bondig_configs lacp)
    ovs-vsctl set port bond-dpdk other_config:bond-detect-mode=$(get_value ovs_dpdk_bondig_configs bond-detect-mode)
    ovs-vsctl set port bond-dpdk other_config:miimon-interval=$(get_value ovs_dpdk_bondig_configs miimon_interval)
}

# Function to initialize OVS interfaces
function init_ovs_interfaces {
     pci_port_pairs=''

     for nic in $(list_dpdk_nics); do
         address="$(get_value "$nic" address)"
         if [ -z "$pci_port_pairs" ]; then
             pci_port_pairs="$address,$nic"
         else
             pci_port_pairs="$pci_port_pairs $address,$nic"
         fi
     done

     pci_port_pairs="$(echo "$pci_port_pairs" | sort)"

     for pair in $pci_port_pairs; do
         addr="$(echo "$pair" | cut -f 1 -d ",")"
         nic="$(echo "$pair" | cut -f 2 -d ",")"
         bridge="{{ ovs_dpdk_bridge_name }}"

             ovs-vsctl --no-wait --may-exist add-port "$bridge" "$nic" \
                 -- set Interface "$nic" type=dpdk \
                 -- set Interface "$nic" options:dpdk-devargs="$addr" \
                 -- set Interface "$nic" options:n_rxq=4
     done

    ovs-vsctl add-port "{{ ovs_dpdk_bridge_name }}" "{{ ovs_arbitry_dpdk_tunnel_interface_name }}" tag="{{ ovs_bonding_tunnel_interface_vlan_tag }}" 2>/dev/null
    ovs-vsctl set interface "{{ ovs_arbitry_dpdk_tunnel_interface_name }}" type=internal

    ip link set up dev "{{ ovs_arbitry_dpdk_tunnel_interface_name }}" 
    ip addr replace "$(get_value ovs_tunnel tunnel_interface_cidr)" dev "{{ ovs_arbitry_dpdk_tunnel_interface_name }}"
    
}

# Function to list all NICs
function list_nics {
    dpdk_nics=""
    for nic in $(get_value | grep -v ovs); do
        dpdk_nics+="$nic "
    done

    # Trim the trailing space
    dpdk_nics=$(echo "$dpdk_nics" | xargs)
    echo "$dpdk_nics"
}

# Function to list all DPDK NICs
function list_dpdk_nics {
    declare -a dpdk_nics
    #for nic in $(get_value ovs port_mappings | tr ',' '\n' | cut -d : -f 1); do
    for nic in $(get_value ovs_dpdk_bondig_configs interfaces  | tr ',' '\n' | cut -d : -f 1); do
        dpdk_nics+="$nic "
    done

    #dpdk_nics+=$(get_value ovs_tunnel tunnel_interface)

    for nic in ${dpdk_nics[*]}; do
        echo "$nic"
    done
}

# Function to get a value from the configuration file
function get_value {
    crudini --get "$CONFIG_FILE" "$@"
}

function restart_service {
    systemctl restart openvswitch-switch.service
}

function config_path_ports {
    declare -a bridges
    raw_bridge_mappings=$(get_value ovs bridge_mappings)
    bridge_mappings=( ${raw_bridge_mappings//,/ } )
    for br in "${!bridge_mappings[@]}"; do
        bridges+=( "$(echo ${bridge_mappings[$br]} | cut -f 2 -d ":")" )
    done
    br_dpdk=$(get_value ovs_dpdk_configs dpdk_bridge_name)
    for br in "${bridges[@]}"; do
        ovs-vsctl --no-wait --may-exist add-port "$br" "patch-$br-to-$br_dpdk"
        ovs-vsctl set interface "patch-$br-to-$br_dpdk" type=patch
        ovs-vsctl set interface "patch-$br-to-$br_dpdk" options:peer="patch-$br_dpdk-to-$br"
        ovs-vsctl set port "patch-$br-to-$br_dpdk" $(get_value br_ex_type_mapping "$br")=$(get_value br_ex_vni_mapping "$br")
        
        ovs-vsctl --no-wait --may-exist add-port "$br_dpdk" "patch-$br_dpdk-to-$br"
        ovs-vsctl set interface "patch-$br_dpdk-to-$br" type=patch
        ovs-vsctl set interface "patch-$br_dpdk-to-$br" options:peer="patch-$br-to-$br_dpdk"
        ovs-vsctl set port "patch-$br_dpdk-to-$br" $(get_value br_ex_type_mapping "$br")=$(get_value br_ex_vni_mapping "$br")
    done
}

# Start the OVS initialization process
init_OVS
